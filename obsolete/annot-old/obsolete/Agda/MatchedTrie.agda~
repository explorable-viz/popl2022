-- Adapted from Hinze's "Generalizing Generalized Tries", via Conal Elliott's blog.
module Trie where

   open import SharedModules hiding (¬_)

   open import Cxt as ᶜ using («Ren; weakenᵣ†);
      open ᶜ.Cxt; open ᶜ.Substitutable ⦃...⦄ hiding (_<$>_; var)
   import Type
   open import VarCxt as ᵛᶜ using (VarCxt; Type); open ᵛᶜ.Type

   -- Trie over X, with domain A. TODO: surface syntax to hide [] argument to shiftable substitution.
   mutual
      data Trie (X : VarCxt → Set) : Type → VarCxt → Set where
         ε : ∀ {A Γ} → Γ ⊢ A ⇀ X
         any : ∀ {A Γ} → X (Γ ‚ A) → Γ ⊢ A ⇀ X
         [_] : ∀ {A Γ} → Γ ⊢ A ⇀⁻ X → Γ ⊢ A ⇀ X

      data Trie⁻ (X : VarCxt → Set) : Type → VarCxt → Set where
         nat : ∀ {Γ} → X Γ → Γ ⊢ nat ⇀⁻ X
         〈〉 : ∀ {Γ} → X Γ → Γ ⊢ 𝟏 ⇀⁻ X
         ⟅_,_⟆ : ∀ {A B Γ} → Γ ⊢ A ⇀ X → Γ ⊢ B ⇀ X → Γ ⊢ A + B ⇀⁻ X
         ↥ : ∀ {A B Γ} → Γ ⊢ A ⇀ (λ Γ → Γ ⊢ B ⇀ X) → Γ ⊢ A ⨰ B ⇀⁻ X
         fun : ∀ {A B Γ} → X Γ → Γ ⊢ A ⇾ B ⇀⁻ X
         roll : ∀ {A Γ} → Γ ⊢ ((sub (const (μ A)) * []) A) ⇀ X → Γ ⊢ μ A ⇀⁻ X
